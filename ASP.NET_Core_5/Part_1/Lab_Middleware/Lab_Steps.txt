Lab: 使用 ASP.NET 的 Middleware / Pipeline 功能




1.  建立新專案

1.1 啟動 Visual Studio

1.2 點按<建立新的專案>選項

1.3 上方三個下拉式選單，分別選擇: C#、所有平台、Web

1.4 選擇: 空的 ASP.NET Core 應用程式 (Model-View-Controller)<下一步>

1.5 專案名稱: Lab_Middleware <下一步>

1.6 目標Framework: .NET 5
    驗證類型: 無
    針對 HTTPS 進行設定，勾選 
    <建立>




2.  使用 Run 處理全部的 Request


2.1 開啟 Startup.cs

2.2 將原先的 Configure() 方法整個設定為註解(或刪除)

2.3 新寫一個 Configure() 方法，內容如下:

        public void Configure(IApplicationBuilder app)  {
            app.Run(async context =>
            {
                await context.Response.WriteAsync("Hello, ASP.NET Core!");
            });
        }

2.4 Ctrl + F5 執行程式。




3.  以 Pipeline 依序處理 Request


3.1 將 Configure() 方法修改成這樣:

        public void Configure(IApplicationBuilder app)
        {
            app.Use(async (context, next) =>
            {
                context.Response.ContentType = "text/html";
                await context.Response.WriteAsync("Hello from first delegate.<br>");
                await next.Invoke();
                await context.Response.WriteAsync("code from first delegate. ( after invoke() )<br>");
            });

            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync("Hello from second delegate.<br>");
                await next.Invoke();
            });

            app.Run(async context =>
            {
                await context.Response.WriteAsync("Hello from final delegate.<br>");
            });
        }


3.2 Ctrl + F5 執行程式。

    <Note>
    如果第二個 app.Use() 不呼叫 next.Invoke(); 呢? 
    程式流程會變成怎樣?




4.  以 Map 進行分流


4.1 將 Configure() 方法修改成這樣:

       private static void HandleMap1(IApplicationBuilder app) {
            app.Run(async context => {
                await context.Response.WriteAsync("Map One");
            });
        }

        private static void HandleMap2(IApplicationBuilder app) {
            app.Run(async context => {
                await context.Response.WriteAsync("Map Two");
            });
        }

        public void Configure(IApplicationBuilder app) {
            app.Map("/map1", HandleMap1);
            app.Map("/map2", HandleMap2);
            app.Run(async context => {
                await context.Response.WriteAsync("Other delegate. Hint: type /map1 for testing");
            });
        }


4.2 Ctrl + F5 執行程式


5.  Client 端的使用者操作畫面與程式


5.1 滑鼠右鍵點按專案 | 加入 | 新增資料夾，
    名稱:「wwwroot」


5.2 在 wwwroot 資料夾建立一個新的 index.html，
    內容隨意


5.3 Ctrl + F5 執行 Web 應用程式

    <Note>為何看不到 index.html 的內容?


5.4 工具 | NuGet 套件管理員 | 套件管理器主控台
    輸入下列指令:

    Install-Package Microsoft.AspNetCore.StaticFiles


4.5 開啟 Startup.cs，找到 Configure()，
    加入下列兩行程式到 app.Map(); 之前

    app.UseDefaultFiles();
    app.UseStaticFiles();


4.6 Crtl + F5 執行程式

    <Note>這次應該能看到 index.html 的內容了。


